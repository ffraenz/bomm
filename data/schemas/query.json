{
  "title": "Bomm query schema",
  "definitions": {
    "wiring": {
      "type": "string"
    },
    "lettermask": {
      "type": "string",
      "description": "Set of letters drawn from the alphabet. Use '*' to select all letters."
    },
    "wheelName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 15
    },
    "measure": {
      "enum": [
        "entropy",
        "entropy_bigram",
        "entropy_trigram",
        "entropy_quadgram",
        "entropy_pentagram",
        "entropy_hexagram",
        "ic",
        "ic_bigram",
        "ic_trigram",
        "ic_quadgram",
        "ic_pentagram",
        "ic_hexagram",
        "sinkov_monogram",
        "sinkov_bigram",
        "sinkov_trigram",
        "sinkov_quadgram",
        "sinkov_pentagram",
        "sinkov_hexagram",
        "trie"
      ]
    },
    "mechanism": {
      "enum": [
        "stepping",
        "odometer",
        "none"
      ]
    },
    "trie": {
      "type": "object",
      "properties": {
        "words": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "word": {
                "type": "string"
              },
              "value": {
                "type": "number"
              },
              "garbles": {
                "type": "integer"
              }
            },
            "required": [
              "word",
              "value"
            ]
          }
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "ciphertext": {
      "type": "string"
    },
    "space": {
      "type": "object",
      "description": "Key space defining what keys are enumerated",
      "properties": {
        "mechanism": {
          "$ref": "#/definitions/mechanism"
        },
        "slots": {
          "type": "array",
          "description": "Scrambler slots describe what wheels can be used in what slot, whether each slot is rotating, and what ring settings and positions should be enumerated. Slots are assumed in their physical order from left to right including the reflector at index 0 and the entry wheel (if any) at the last position.",
          "items": {
            "type": "object",
            "properties": {
              "rotating": {
                "type": "boolean",
                "description": "Whether the wheel in this slot rotates or not",
                "default": false
              },
              "wheels": {
                "type": "array",
                "description": "Set of wheel names that reference either custom wheels that can be defined in the root `wheels` field or known wheels (e.g. `ETW-ABC`, `I`, `II`, `III`, `UKW-B`).",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/definitions/wheelName"
                }
              },
              "rings": {
                "$ref": "#/definitions/lettermask",
                "default": "a"
              },
              "positions": {
                "$ref": "#/definitions/lettermask",
                "default": "a"
              }
            },
            "required": [
              "wheels"
            ]
          }
        },
        "plugs": {
          "$ref": "#/definitions/lettermask"
        },
        "offset": {
          "type": "number",
          "description": "The number of keys to be skipped at the beginning of the key space",
          "minimum": 0
        },
        "limit": {
          "type": "number",
          "description": "The maximum number of keys to be enumerated in this key space (not including the offset)",
          "minimum": 1
        }
      },
      "required": [
        "slots"
      ]
    },
    "passes": {
      "type": "array",
      "description": "Set of strategies to be performed in order to find the best performing plugboard configurations",
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "object",
            "description": "Configurable best improvement hill climb strategy for finding the best performing plugboard configuration",
            "properties": {
              "type": {
                "enum": ["hill_climb"]
              },
              "measure": {
                "$ref": "#/definitions/measure",
                "description": "Measure to be used to evaluate the first plugs"
              },
              "finalMeasure": {
                "$ref": "#/definitions/measure",
                "description": "Measure to be used to evaluate the last plugs"
              },
              "finalMeasureMinNumPlugs": {
                "type": "integer",
                "description": "Minimum number of plugs that need to be assigned before switching from the initial measure to the final measure",
                "default": 7,
                "minimum": 0
              },
              "backtrackingMinNumPlugs": {
                "type": "integer",
                "description": "Minimum number of plugs that need to be assigned before evaluating backtracking steps (i.e. removing plugs)",
                "default": 5,
                "minimum": 0
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "description": "Reswapping strategy reverse engineered from the enigma-suite project (see https://www.bytereef.org/enigma-suite.html)",
            "properties": {
              "type": {
                "enum": ["reswapping"]
              },
              "measure": {
                "$ref": "#/definitions/measure"
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "description": "Crib assessment stage increasing the score for each crib found in the putative plaintext",
            "properties": {
              "type": {
                "enum": ["trie"]
              },
              "baseMeasure": {
                "$ref": "#/definitions/measure"
              },
              "trie": {
                "$ref": "#/definitions/trie"
              }
            },
            "required": [
              "type",
              "trie"
            ]
          }
        ]
      }
    },
    "wheels": {
      "type": "array",
      "description": "Set of custom wheels including their wiring and turnovers that can be referenced by name in the key space",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/definitions/wheelName"
          },
          "wiring": {
            "$ref": "#/definitions/wiring"
          },
          "turnovers": {
            "$ref": "#/definitions/lettermask"
          }
        },
        "required": [
          "name",
          "wiring"
        ]
      }
    },
    "measures": {
      "type": "object",
      "description": "Global configuration options for measures",
      "properties": {
        "trie": {
          "type": "object",
          "description": "Configuration options for the 'trie' measure",
          "properties": {
            "baseMeasure": {
              "$ref": "#/definitions/measure"
            },
            "trie": {
              "$ref": "#/definitions/trie"
            }
          },
          "required": [
            "trie"
          ]
        }
      }
    },
    "frequencies": {
      "type": "object",
      "description": "Set of filenames to be used as frequency maps for Sinkov's measures",
      "properties": {
        "monogram": {
          "type": "string"
        },
        "bigram": {
          "type": "string"
        },
        "trigram": {
          "type": "string"
        },
        "quadgram": {
          "type": "string"
        },
        "pentagram": {
          "type": "string"
        },
        "hexagram": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "ciphertext",
    "space"
  ]
}
